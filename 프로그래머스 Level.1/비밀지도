function solution(n, arr1, arr2) {
    var answer = [];
   
    for(let i=0; i<n; i++){
        const bin = (arr1[i] | arr2[i]).toString(2);
        let line = [];
        
        for(let j = bin.length-n; j<bin.length; j++) { // j가(인덱스값)이 -1일 경우 undefined 반환.
            if(bin[j] === '1') { // 1이면 '#', 그 외 ' '
                line.push('#');
            } else {
                line.push(' ');
            }
        }
        answer.push(line.join(''));
    }
    return answer;
}

for(let j = bin.length-n; j<bin.length; j++) 대신에 padStart()를 사용하는 방법도 있다.
(padStart():현재 문자열의 시작을 다른 문자열로 채워, 주어진 길이를 만족하는 새로운 문자열을 반환한다.)

["#"," ","#"," ","#"] 이렇게 담기는 것을 출력 방식에 맞추기 위해 join을 사용한다.

var solution=(n,arr1,arr2)=>arr1.map((a,i)=>(a|arr2[i]).toString(2).padStart(n,0).replace(/0/g,' ').replace(/1/g,'#'))
정규표현식을 이용해서 이렇게 짧게도 가능하다.
