React-Query

  장점
    ∙ 캐싱
    ∙ get을 한 데이터에 대해 update를 하면 자동으로 get을 다시 수행한다. (예를 들면 게시판의 글을 가져왔을 때 게시판의 글을 생성하면 게시판 글을 get하는 api를 자동으로 실행 )
    ∙ 데이터가 오래 되었다고 판단되면 다시 get (invalidateQueries)
    ∙ 동일 데이터 여러번 요청하면 한번만 요청한다. (옵션에 따라 중복 호출 허용 시간 조절 가능)
    ∙ 무한 스크롤 (Infinite Queries (opens new window))
    ∙ 비동기 과정을 선언적으로 관리할 수 있다.
    ∙ react hook과 사용하는 구조가 비슷하다.
    
  react-query세팅
  
  ``` js
  import React from "react";
  import ReactDOM from "react-dom";
  import App from "./App";
  import { QueryClient, QueryClientProvider } from "react-query";
  import { ReactQueryDevtools } from "react-query/devtools";

  const queryClient = new QueryClient();

  ReactDOM.render(
    <React.StrictMode>
      <QueryClientProvider client={queryClient}>
        {/* devtools */}
        <ReactQueryDevtools initialIsOpen={true} />
        <App />
      </QueryClientProvider>
    </React.StrictMode>,
    document.getElementById("root")
  );
  ```
  
  


  useQuery
  
   - useQuery는 (queryKey, queryFn, options)인자를 갖는다
   
   
    options

    - keepPreviousData: 쿼리 키가 변경 될 경우 이전 쿼리 키 데이터를 다음 쿼리 키 데이터가 올때까지 가지고 있어서 부드럽게 변화되도록 돕는다
    
    - staleTime: 

        - `staleTime` 은 데이터가 `fresh` 상태로 유지되는 시간이다. 해당 시간이 지나면 `stale` 상태가 된다.
        - default staleTime은 0 이다.
        - fresh 상태에서는 쿼리가 다시 mount 되어도 fetch가 실행되지 않는다.
      
    - refetchOnWindowFocus (boolean | "always")**

        - `refetchOnWindowFocus` 는 데이터가 **stale 상태일 경우** 윈도우 포커싱 될 때 마다 refetch를 실행하는 옵션이다.
        - 예를 들어, 크롬에서 다른 탭을 눌렀다가 다시 원래 보던 중인 탭을 눌렀을 때도 이 경우에 해당한다. 심지어 F12로 개발자 도구 창을 켜서 네트워크 탭이든, 콘솔 탭이든 개발자 도구 창에서 놀다가 페이지 내부를 다시 클릭했을 때도 이 경우에 해당한다.
        - default true
        - always 로 설정하면 항상 윈도우 포커싱 될 때 마다 refetch를 실행한다는 의미이다.
