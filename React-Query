#React-Query

  장점
    ∙ 캐싱
    ∙ get을 한 데이터에 대해 update를 하면 자동으로 get을 다시 수행한다. (예를 들면 게시판의 글을 가져왔을 때 게시판의 글을 생성하면 게시판 글을 get하는 api를 자동으로 실행 )
    ∙ 데이터가 오래 되었다고 판단되면 다시 get (invalidateQueries)
    ∙ 동일 데이터 여러번 요청하면 한번만 요청한다. (옵션에 따라 중복 호출 허용 시간 조절 가능)
    ∙ 무한 스크롤 (Infinite Queries (opens new window))
    ∙ 비동기 과정을 선언적으로 관리할 수 있다.
    ∙ react hook과 사용하는 구조가 비슷하다.
    
  react-query세팅
  
  ``` js
  import React from "react";
  import ReactDOM from "react-dom";
  import App from "./App";
  import { QueryClient, QueryClientProvider } from "react-query";
  import { ReactQueryDevtools } from "react-query/devtools";

  const queryClient = new QueryClient();

  ReactDOM.render(
    <React.StrictMode>
      <QueryClientProvider client={queryClient}>
        {/* devtools */}
        <ReactQueryDevtools initialIsOpen={true} />
        <App />
      </QueryClientProvider>
    </React.StrictMode>,
    document.getElementById("root")
  );
  ```
  
 ##useQuery
   - 데이터를 get 하기 위한 api   /// post, update는 useMutation 사용
   - useQuery는 (queryKey, queryFn, options)인자를 갖는다
   - 비동기로 작동 두 개의 useQuery가 있으면 동시에 실행  //여러 개 있으면 useQueries 사용 추천
   - enabled를 사용하면 useQuery를 동기적으로 사용 가능
   
   isLoading, isSuccess 말고 status로 한번에 처리 가능
   
       function Todos() {
      const { status, data, error } = useQuery("todos", fetchTodoList);

      if (status === "loading") {
        return <span>Loading...</span>;
      }

      if (status === "error") {
        return <span>Error: {error.message}</span>;
      }

      return (
        <ul>
          {data.map(todo => (
            <li key={todo.id}>{todo.title}</li>
          ))}
        </ul>
      );
    }
   
   
  ##useQuery 동기적으로 실행
   
   useQuery의 3번째 인자로 옵션값이 들어가는데 그 옵션의 enabled에 값을 넣으면 
   그 값이 true일때 useQuery를 실행한다. 이것을 이용하면 동기적으로 함수를 실행 할 수 있다.
   
       const { data: todoList, error, isFetching } = useQuery("todos", fetchTodoList);
       const { data: nextTodo, error, isFetching } = useQuery(
          "nextTodos",
          fetchNextTodoList,
          {
            enabled: !!todoList // true가 되면 fetchNextTodoList를 실행한다
          }
        );
   
   
   ##useQueries
    useQuery를 비동기로 여러개 실행할 경우 여러 귀찮은 경우가 생긴다.
    (변수를 다 기억해야하고, 변수에 대한 로딩, 성공, 실패 처리를 다 각각 해야한다.)
    
      useQueries를 사용하면 묶어서 사용할 수 있다.

            const result = useQueries([
          {
            queryKey: ["getRune", riot.version],
            queryFn: () => api.getRunInfo(riot.version)
          },
          {
            queryKey: ["getSpell", riot.version],
            queryFn: () => api.getSpellInfo(riot.version)
          }
        ]);

      useEffect(() => {
        console.log(result); // [{rune 정보, data: [], isSucces: true ...}, {spell 정보, data: [], isSucces: true ...}]
        const loadingFinishAll = result.some(result => result.isLoading);
        console.log(loadingFinishAll); // loadingFinishAll이 false이면 최종 완료
      }, [result]);
    
    ##QueryCache
     ∙ 쿼리에 대해 성공, 실패 전처리를 할 수 있습니다.
        
        const queryClient = new QueryClient({
          queryCache: new QueryCache({
            onError: (error, query) => {
              console.log(error, query);
              if (query.state.data !== undefined) {
                toast.error(`에러가 났어요!!: ${error.message}`);
              },
            },
            onSuccess: data => {
              console.log(data)
            }
          })
        });
        
     ##useMutation
      ∙ 값을 바꿀때 사용하는 api
      
        import { useState, useContext, useEffect } from "react";
        import loginApi from "api";
        import { useMutation } from "react-query";

        const Index = () => {
          const [id, setId] = useState("");
          const [password, setPassword] = useState("");

          const loginMutation = useMutation(loginApi, {
            onMutate: variable => {
              console.log("onMutate", variable);
              // variable : {loginId: 'xxx', password; 'xxx'}
            },
            onError: (error, variable, context) => {
              // error
            },
            onSuccess: (data, variables, context) => {
              console.log("success", data, variables, context);
            },
            onSettled: () => {
              console.log("end");
            }
          });

          const handleSubmit = () => {
            loginMutation.mutate({ loginId: id, password });
          };

          return (
            <div>
              {loginMutation.isSuccess ? "success" : "pending"}
              {loginMutation.isError ? "error" : "pending"}
              <input type="text" value={id} onChange={e => setId(e.target.value)} />
              <input
                type="password"
                value={password}
                onChange={e => setPassword(e.target.value)}
              />
              <button onClick={handleSubmit}>로그인</button>
            </div>
          );
        };

        export default Index;
        
    ##update후에 get 다시 실행
    
    react-query 장점으로 update후에 get 함수를 간단히 재실행 할 수 있다.
    mutation 함수가 성공할 때, unique key로 맵핑된 get 함수를 invalidateQueries에 넣어주면 된다.
  
    const mutation = useMutation(postTodo, {
      onSuccess: () => {
        // postTodo가 성공하면 todos로 맵핑된 useQuery api 함수를 실행합니다.
        queryClient.invalidateQueries("todos");
      }
    });
     
     만약 mutation에서 return된 값을 이용해서 get 함수의 파라미터를 변경해야할 경우 setQueryData를 사용
     
     const queryClient = useQueryClient();

     const mutation = useMutation(editTodo, {
        onSuccess: data => {
          // data가 fetchTodoById로 들어간다
          queryClient.setQueryData(["todo", { id: 5 }], data);
        }
      });

      const { status, data, error } = useQuery(["todo", { id: 5 }], fetchTodoById);

      mutation.mutate({
        id: 5,
        name: "nkh"
      });
      
      ##react Suspense
      
      ∙ 비동기를 좀 더 선언적 사용할 수 있다.
      ∙ suspense를 사용하기 위해 QueryClient에 옵션을 하나 추가
   
        const queryClient = new QueryClient({
          defaultOptions: {
            queries: {
              retry: 0,
              suspense: true
            }
          }
        });
   
      
      const { data } = useQurey("test", testApi, { suspense: true });

        return (
          // isLoading이 true이면 Suspense의 fallback 내부 컴포넌트가 보여집니다.
          // isError가 true이면 ErrorBoundary의 fallback 내부 컴포넌트가 보여집니다.
          <Suspense fallback={<div>loading</div>}>
            <ErrorBoundary fallback={<div>에러 발생</div>}>
              <div>{data}</div>
            </ErrorBoundary>
          </Supense>
        );
   
    options

    - keepPreviousData: 쿼리 키가 변경 될 경우 이전 쿼리 키 데이터를 다음 쿼리 키 데이터가 올때까지 가지고 있어서 부드럽게 변화되도록 돕는다
    
    - staleTime: 

        - `staleTime` 은 데이터가 `fresh` 상태로 유지되는 시간이다. 해당 시간이 지나면 `stale` 상태가 된다.
        - default staleTime은 0 이다.
        - fresh 상태에서는 쿼리가 다시 mount 되어도 fetch가 실행되지 않는다.
      
    - refetchOnWindowFocus (boolean | "always")**

        - `refetchOnWindowFocus` 는 데이터가 **stale 상태일 경우** 윈도우 포커싱 될 때 마다 refetch를 실행하는 옵션이다.
        - 예를 들어, 크롬에서 다른 탭을 눌렀다가 다시 원래 보던 중인 탭을 눌렀을 때도 이 경우에 해당한다. 심지어 F12로 개발자 도구 창을 켜서 네트워크 탭이든, 콘솔 탭이든 개발자 도구 창에서 놀다가 페이지 내부를 다시 클릭했을 때도 이 경우에 해당한다.
        - default true
        - always 로 설정하면 항상 윈도우 포커싱 될 때 마다 refetch를 실행한다는 의미이다.
