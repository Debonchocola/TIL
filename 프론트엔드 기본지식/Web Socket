웹소켓
  하나의 HTTP 접속으로 양방향 메시지를 자유롭게 주고받기 위해서 나왔다.
  서버와 브라우저 사이에 양방향 소통이 가능합니다. 브라우저는 서버가 직접 보내는 데이터를 받아들일 수 있고, 
  사용자가 다른 웹사이트로 이동하지 않아도 최신 데이터가 적용된 웹을 볼 수 있게 해줍니다. 
  
  작동원리
    서버와 클라이언트간의 웹소켓 연결을 HTTP프로토콜을 통해 이루어집니다.
    연결이 정상적으로 이루어진다면 서버와 클라이언트 간에 웹소켓 연결(TCP/IP기반)이 이루어지고 일정 시간이 지나면
    HTTP연결은 자동으로 끊어집니다.
    대부분의 경우 SockJS나 Socket.IO같은 오픈 소스 라이브러리를 많이 사용하고 있으며 
    메시지 포맷 또한 STOMP같은 프로토콜을 같이 이용합니다.
    
  문제점
    1. 프로그램 구현에 보다 많은 복잡성을 초래합니다.

      - 웹 소켓은 HTTP와 달리 Stateful protocol이기 때문에 서버와 클라이언트 간의 연결을 항상 유지해야 하며 만약 비정상적으로 연결이 끊어졌을때 적절하게 대응해야 한다. 이는 기존의 HTTP 사용시와 비교했을때 코딩의 복잡성을 가중시키는 요인이 될 수 있습니다.

    2. 서버와 클라이언트 간의 Socket 연결을 유지하는 것 자체가 비용이 듭니다.

      - 특히나 트래픽 양이 많은 서버같은 경우에는 CPU에 큰 부담이 될 수 있습니다.

    3. 오래된 버전의 웹 브라우저에서는 지원하지 않습니다. (물론 SockJS 라이브러리 같은 경우에는 Fallback option을 제공하고 있습니다.)

  대표적인 사용 예
    1. 페이스북과 같은 SNS APP

    2. LOL 같은 멀티플레이어 Game

    3. 위치 기반 APP

    4. 증권 거래 정보 사이트 및 APP

    5. 화상 채팅 APP

    6. 구글 Doc 같이 여러 명이 동시 접속해서 수정할 수 있는 Tool
    
    
    출처: https://choseongho93.tistory.com/266
