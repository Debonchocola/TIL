전체 셀렉터
* {color: red;}

태그 셀렉터
h1 {color: red;}
<h1>Heading</h1>

id 셀렉터
#p1 {color: red;}
<p id="p1">paragraph 1</p>

class 셀렉터
.container {font-size: 16px}
.point {color: red}
<div className="container point">paragraph</div>

여러개 사용 가능

h1[title ~= first] {color: red} 포함된 요소에 적용

<body>
  <h1 title="heading first">Heading first</h1> => 적용
  <h1 title="heading third">Heading third</h1>
</body>

a[href^="https://"] { color: red; } 시작하는 요소에 적용

<body>
  <a href="https://www.test.com">https://www.test.com</a><br> => 적용
  <a href="http://www.test.com">http://www.test.com</a>
</body>

a[href$=".html"] { color: red; } 끝나는 요소에 적용

<body>
  <a href="test.html">test.html</a><br>
  <a href="test.jsp">test.jsp</a>
</body>

div[class*="test"] { color: red; } 포함하는 요소 적용

<body>
  <div class="first_test">The first div element.</div> => 적용
  <div class="test">The third div element.</div> => 적용
</body>

p + ul { color: red; } 인접 형제 셀렉터 (바로 뒤의 요소를 선택)

<ul>
  <li>Coffee</li>
  <li>Tea</li>
  <li>Milk</li>
</ul>

<p>The first paragraph.</p>

<ul> ==> 적용
  <li>Coffee</li>
  <li>Tea</li>
  <li>Milk</li>
</ul>

 p ~ ul { color: red; } 뒤에 있는 해당 값 형제 셀렉터 모두

<ul>
  <li>Coffee</li>
  <li>Tea</li>
  <li>Milk</li>
</ul>

<p>The first paragraph.</p>
<ul> ==> 적용
  <li>Coffee</li>
  <li>Tea</li>
  <li>Milk</li>
</ul>

<h2>Another list</h2>
<ul> ==> 적용
  <li>Coffee</li>
  <li>Tea</li>
  <li>Milk</li>
</ul>

링크 셀렉터
a:link {color: orange} => 방문하지 않은 링크일 떄
a:visited {color: green} => 방문한 링크일 때

  /* ol 요소의 자식 요소인 li 요소 중에서 짝수번째 요소만을 선택 */
    ol > li:nth-child(2n)   { color: orange; }
    /* ol 요소의 자식 요소인 li 요소 중에서 홀수번째 요소만을 선택 */
    ol > li:nth-child(2n+1) { color: green; }

    /* ol 요소의 자식 요소인 li 요소 중에서 첫번쨰 요소만을 선택 */
    ol > li:first-child     { color: red; }
    /* ol 요소의 자식 요소인 li 요소 중에서 마지막 요소만을 선택 */
    ol > li:last-child      { color: blue; }

/* input 요소 중에서 type 어트리뷰트의 값이 password가 아닌 요소를 선택 */
  input:not([type=password]) {
    background: yellow;
  }

::first-letter 콘텐츠의 첫글자를 선택한다.
::first-line   콘텐츠의 첫줄을 선택한다. 블록 요소에만 적용할 수 있다.
::after        콘텐츠의 뒤에 위치하는 공간을 선택한다. 일반적으로 content 프로퍼티와 함께 사용된다.
::before       콘텐츠의 앞에 위치하는 공간을 선택한다. 일반적으로 content 프로퍼티와 함께 사용된다.
::selection    드래그한 콘텐츠를 선택한다. iOS Safari 등 일부 브라우저에서 동작 않는다.

em vs rem 차이점
em은 상속을 받아서 상대적
rem은 최상위 요소의 사이즈를 기준으로


block vs inline 

block은 새로운 라인에서 시작 inline은 줄을 바꾸지 않고 다른 요소와 함꼐 한 행에 위치
block은 width, height 프로퍼티 지정 가능 inline은 margin top bottom도 지정 불가
inline요소 뒤에 공백은 정의하지 않은 space(4px)이 자동으로 지정됨.
inline-block은 위의 두 개의 특징을 모두 갖는다. 한줄에 표현 되면서 width,height,margin 모두 지정 가능

background-size: contain => 크기 비율을 유지한 상태에서 부모요소에 잘리는 부분 없이 모두 들어가도록 스케일 조정

background-attachment: fixed; => 배경화면 위에 글을 올린 경우 스크롤이 생기면 배경화면도 함께 이동하는데 그떄 배경화면은 고정 시키기 위해서 사용

white-space 줄바꿈이 되지 않게 하기 위해서는 nowrap, pre를 사용 차이점은 pre는 공백이나 들여쓰기를 그대로 반영

text-overflow: ellipsis 문장이 긴 경우 ...처리 

word-wrap: break-word 은 단어가 부모영역을 나간 경우 안으로 들어가게 하는데 단어를 어느정도 고려하여 개행한다.
word-break: break-all 은 고려하지 않고 강제 개행한다.

position: relative는 부모 기준으로 좌표를 사용하여 위치
absolute는 부모가 없으면 body를 기준으로 위치 즉 부모 요소 벗어나 자유롭게 위치 가능
fixed는 부모 요소 상관 없이 좌표 값을 기준으로 위치

float을 선언한 자녀 요소를 가진 부모 요소의 높이가 정상적이지 않은 경우가 있는데 float 요소의 높이를 알 수 없기 떄문
해결방법은 부모요소에 overflow: hidden 선언 하거나 다른 클라스를 하나 더 줘서 그곳에서 clear: both를 하는 방법이다

상속이 되는 프로퍼티가 있고 아닌 프로퍼티가 있는데 
상속이 되는 대표적인 프로퍼티로는 color가 있다.

캐스캐이딩
  중요도 -선언 위치에 따라 우선순위 달라짐
    1. head 요소 내의 style 요소
    2. head 요소 내의 style 요소 내의 @import 문
    3. <link> 로 연결된 CSS 파일
    4. <link> 로 연결된 CSS 파일 내의 @import 문
    5. 브라우저 디폴트 스타일시트
  
  명시도
    !important > 인라인 스타일 > 아이디 선택자 > 클래스/어트리뷰트/가상 선택자 > 태그 선택자 > 전체 선택자 > 상위 요소에 의해 상속된 속성

  선언순서 - 나중에 선언된 스타일이 우선 적용됨.

Transition 일정시간에 걸쳐서 변화를 일으키고 싶을 떄 사용
  transition-property: width, background-color; //요소 선택
  transition-duration: 2s, 2s; //일어나는 지속시간 설정 *필수
    
  모든 요소가 가능한건 아니다 예로 display 프로퍼티는 불가
  또한 layout을 변화시키는 width,height, margin, padding은 속도 저하를 일으킨다.

  transition-timing-function을 통해 적용하는 속도의 변화도 줄 수 있다.
  ease는 느리게 시작하여 점점 빨라지다가 느리게 종료
  linear 등속운동
  ease-in 느리게 시작 후 일정 속도 되면 등속
  등등 있다.
