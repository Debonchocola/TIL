동작 방식
웹페이지를 서버에 요청하고 응답 받아 브라우저에 표시
  서버에서 HTML, CSS, Javascript, 이미지 파일 등 응답 받는다.
  HTML, CSS 파일은 렌더링 엔진의 HTML파서, CSS파서에 의해 파싱 되어 
  DOM, CSSOM 트리로 변환 되고 렌더 트리로 결합된다.
  Javascript는 렌더링 엔진이 아닌 자바스크립트 엔진이 처리
  HTML파서는 script태그를 만난면 DOM 생성 프로세스를 중지하고 자바스크립트 엔진으로 제어 권한을 넘긴다.
  권한을 넘겨 받아 자바스크립트 파일을 로드하고 파싱하여 실행 => 실행 완료되면 다시 권한 넘김 DOM 생성 재개
  동기적으로 처리 script 태그 위치에 따라 DOM 생성 지연 발생할 수 있음

  body 요소 가장 아래에 둘 떄 장점
  1. HTML 요소들이 스크립트 로딩으로 렌더링에 지장 받는 일이 없어서 페이지 로딩 시간이 단축
  2. DOM이 완성되지 않은 상태에서 자바스크립트가 DOM 조작하면 에러 발생


  자바스크립트는 할당된 값의 타입에 의해 동적으로 변수의 타입이 결정 => 동적 타이핑

  프로퍼티 값으로 함수가 들어갈 수 있는데 일반 함수와 구분하고자 메소드라고 부른다.
  변수는 값이 위치하고 있는 메모리 주소에 접근하기 위한 식별자이다.

데이터 타입
  원시타입 (변경 불가능한 값) - 값에 의한 전달
    boolean
    null
    nudefined
    number
    string
    symbol
  객체타입
    object

  var str = "string"; // 큰 따옴표
  str = 'string';     // 작은 따옴표
  str = `string`;     // 백틱(ES6 템플릿 리터럴)

  str[0] = 'S';
  console.log(str); // string
  문자열은 배열처럼 인덱스를 통해 접근할 수 있다. 이와 같은 특성을 갖는 데이터를 유사 배열이라 한다
  str[0] = 'S'처럼 이미 생성된 문자열의 일부 문자를 변경해도 반영되지 않는다
  이것을 변경 불가능(immutable)이라 한다.
  
undefined

  선언은 되었지만 값을 할당하지 않은 변수에 접근하거나 존재하지 않는 객체 프로퍼티에 접근할 경우 undefined가 반환된다
  값이 없을 때는 undefined 대신 null 사용할 것!

null 
  typeof 를 사용하면 object가 나온다. null 타입 확인은 ===를 사용해야 한다.

symbol 
  ES6에서 추가된 7번쨰 타입 이름의 충돌 위험이 없는 유일한 객체의 프로퍼티 키를 만들기 위해 사용

  // 심볼 key는 이름의 충돌 위험이 없는 유일한 객체의 프로퍼티 키
  var key = Symbol('key');
  console.log(typeof key); // symbol
  
  var obj = {};
  obj[key] = 'value';
  console.log(obj[key]); // value

객체타입
  원시타입을 제외한 나머지 값은 객체이다.

  변수 - 데이터가 저장된 메모리 상의 주소를 기억하여 참조한다.
        일정기간 사용할 값에 사용하기 때문에 의미있는 변수명이 필요하다.

  호이스팅 - 모든 선언문이 해당 scope의 선두로 옮겨진 것처럼 동작 => 선언 이전에 참조 가능
          실제로 변수 선언이 코드 레벨로 옮겨진 것은 아니고 변수 객체(Variable object)에 등록되고 undefined로 초기화된 것이다.

  함수 레벨 스코프(Function-level scope)
  함수 내에서 선언된 변수는 함수 내에서만 유효하며 함수 외부에서는 참조할 수 없다. 즉, 함수 내부에서 선언한 변수는 지역 변수이며 함수 외부에서 선언한 변수는 모두 전역 변수이다.
  
  블록 레벨 스코프(Block-level scope)
  코드 블록 내에서 선언된 변수는 코드 블록 내에서만 유효하며 코드 블록 외부에서는 참조할 수 없다.

  let const는 블록 레벨 var는 현재 잘 사용하지 않는다.
  이유는 1.전역 변수 남발 2.의도치 않은 변수의 전역화 3. 중복선언 가능으로 의도치 않은 변수값 변경 4.호이스팅 문제

  변수의 유효범위 (scope)는 좁을수록 좋다.

  연산자
  피연산자도 평가되어 하나의 값이 되므로 표현식이고 피연산자를 연산자와 결합한 연산자 표현식도 물론 표현식이다.

    산술연산자 + - * / %
    단항산술연산자 ++ -- +(아무효과 없음) -(양수 => 음수 음수 => 양수)
    // 선대입 후증가 (Postfix increment operator)
    result = x++;
    console.log(result, x); // 5 6
    
    // 선증가 후대입 (Prefix increment operator)
    result = ++x;
    console.log(result, x); // 7 7
    
    // 선대입 후감소 (Postfix decrement operator)
    result = x--;
    console.log(result, x); // 7 6
    
    // 선감소 후대입 (Prefix decrement operator)
    result = --x;
    console.log(result, x); // 5 5
