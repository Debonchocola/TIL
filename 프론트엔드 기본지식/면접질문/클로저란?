const x = 1;

function outer() {
	const x = 10;

	function inner() {
		console.log(x); //10
	}

	inner();
}

outer();

중첩함수 inner의 경우 상위 스코프는 외부 함수 outer이다.

렉시컬 환경 특징이다. 상위 스코프의 기준은 어디서 선언했는지로 결정된다.

렉시컬 환경은 자신의 ‘외부 렉시컬 환경에 대한 참조’를 통해 상위 렉시컬 환경과 연결된다. (스코프 체인)

24.2 함수 객체의 내부 슬롯

  함수는 자신의 내부 슬롯에 자신이 정의된 환경. 즉 상위 스코프의 참조를 저장한다.

  내부 슬롯에 저장된 현재 실행 중인 실행 컨텍스트의 렉시컬 환경의 참조가 바로 상위 스코프다.

  함수 코드 평가 순서

  1. 함수 실행 컨텍스트 생성
  2. 함수 렉시컬 환경 생성

      2.1 함수 환경 레코드 생성

      2.2 this 바인딩

      2.3 외부 렉시컬 환경에 대한 참조 결정
      
24.3 클로저와 렉시컬 환경
  
  const x =1;

  function outer() {
    const x =10;
    const inner = function() {console.log(x);};
    return inner;
  }

  const innerFunc = outer();
  innerFunc(); // 10
  
  이 경우 outer 함수를 호출하면 inner함수를 리턴하고 생명 주기를 마감한다.

  즉 outer 함수의 실행 컨택스트는 실행 컨택스트 스택에서 제거된다.

  outer 함수의 지역 변수인 x 또한 생명 주기를 마감한다. 더는 유효하지 않게 되어 x 변수에 접근 방법이 없어보인다.

  그러나 innerFunc의 경우 10이 나온다.
  
  이처럼 외부 함수보다 중첩 함수가 더 오래 유지되는 경우 중첩 함수는 이미 생명 주기가 종료한 외부 함수의 변수를

  참조할 수 있다. 이러한 중첩 함수를 클로저라고 부른다.

  클로저란? 외부함수 보다 더 오래 유지되어서 이미 생명주기가 종료한 외부 함수의 변수를 참조할 수 있는 중첩함수입니다.

  내부슬롯에 저장된 상위 스코프는 함수가 존재하는 한 유지되기 때문에

  위의 예제에서 innerFunc에 의해 참조되고 있기 때문에 유지된다.

  그러나 상위 스코프의 어떤 식별자도 참조하지 않는 함수는 클로저가 아니다.

  이론적으로 클로저는 상위 스코프를 기억해야 하므로 불필요한 메모리 점유를 걱정할 수도 있지만

  자바스크립트 엔진은 클로저가 참조하고 있지 않는 식별자는 기억하지 않기에 걱정할 필요 없다.
  
  24.4 클로저의 활용

  클로저는 상태를 안전하게 변경하고 유지하기 위해 사용한다. 다시 말해, 상태가 의도치 않게 변경되지 않도록

  상태를 안전하게 은닉하고 특정 함수에게만 상태 변경을 허용한다.
  
  let num = 0;

  const increase = function () {
    return ++num;
  }

  console.log(increase()); // 1
  console.log(increase()); // 2
  console.log(increase()); // 3
  
  전제조건

  1. 카운트 상태는 increase 함수가 호출되기 전까지 변경되지 않고 유지되어야 한다.
  2. 이를 위해 카운트 상태는 increase 함수만이 변경할 수 있어야 한다.

  하지만 현재 전역 변수로 관리 되기 때문에 의도치 않게 상태가 변경될 수 있다.

  따라서 이를 방지하기 위해 increase 함수만이 num 변수를 참조하고 변경할 수 있게 해야한다.
  
  const increase = (function () {
    let num = 0;

    return ++num;
  };

  console.log(increase()); // 1
  console.log(increase()); // 1
  console.log(increase()); // 1
  
  increase 함수만이 num 변수를 참조하고 변경할 수 있게 되었지만 함수 호출될 때마다 지역 변수 num은

  다시 선언 되고 0으로 초기화 되기 때문에 계속 1이 출력된다.
  
  const increase = (function () {
    let num = 0;
    return function () {

      return ++num;
    }
  }());

  console.log(increase()); // 1
  console.log(increase()); // 2
  console.log(increase()); // 3

  이 경우 즉시 실행 함수는 한 번만 실행되므로 초기화 되는 일은 없다.

  이처럼 클로저는 상태가 의도치 않게 변경되지 않도록 안전하게 은닉하고 특정 함수에게만 상태 변경을 허용하여

  상태를 안전하게 변경하고 유지하기 위해 사용한다.
  
  const counter = (function () {
    let num = 0;
    return {
      increase() {
        return ++num;
      },
      decrease() {
        return num > 0 --num : 0;
      }
    }
  }());

  console.log(increase()); // 1
  console.log(increase()); // 2
  console.log(decrease()); // 1
  console.log(decrease()); // 0
  
  //함수형 프로그래밍에서의 클로저 활용 예제
  function makeCounter(aux) {
    let counter = 0;

    return function () {
      counter = aux(counter);
      return counter;
    };
  }

  function increase(n) {
    return ++n;
  }

  function decrease(n) {
    return --n;
  }

  const increaser = makeCounter(increase);
  console.log(increaser()); // 1
  console.log(increaser()); // 2

  // increaser 함수와는 별개의 독립된 렉시컬 환경을 갖기 때문에 카운터 상태가 연동하지 않는다.
  const decreaser = makeCounter(decrease);
  console.log(increaser()); // -1
  console.log(increaser()); // -2
  
  //연동하여 증감이 가능한 카운터 예시
    const counter = (function () {
      let counter = 0;

      return function (aux) {
        counter = aux(counter);
        return counter;
      }; 
    } () );

    //보조함수
    function increase(n) {
      return ++n;
    }

    function decrease(n) {
      return --n;
    }

    console.log(counter(increase)); //1
    console.log(counter(increase)); //2
    console.log(counter(decrease)); //1
    console.log(counter(decrease)); //0

  24.5 캡슐화와 정보 은닉

  캡슐화는 객체의 상태를 나타내는 **프로퍼티**와 프로퍼티를 참조하고 조작할 수 있는 동작인 **메서드**를 하나로 **묶은 것**

  캡슐화는 객체의 특정 프로퍼티나 메서드를 감출 목적으로 사용하기도 하는데 이를 **정보 은닉**이라고 한다.

  캡슐화는 적절치 못한 접근으로부터 객체의 상태가 변경되는 것을 방지해 정보를 보호, 객체 간 상호 의존성 

  즉 결합도를 낮추는 효과가 있다.
  
  const Person = (function () {
    let _age = 0; //private

    function Person(name, age) {
      this.name = name; //public
      _age = age;
    }

    Person.prototype.sayHi = function () {
      console.log(`Hi ${this.name} I am${_age}`);
    };

    return Person;
  }());

  const me = new Person('Lee', 20);
  me.sayHi(); //Hi Lee I am 20
  console.log(me.name); //Lee
  console.log(me._age); // undefined

  const you = new Person('Kim', 30);
  you.sayHi(); // Hi Kim I am 30

  console.log(me.name); //Kim
  console.log(me._age); // undefined
  
  어느 정도 은닉이 가능한 것처럼 보인다.

  하지만 Person 생성자 함수가 여러 개의 인스턴스를 생성할 경우 _age 변수의 상태가 유지되지 않는다는 것이다.
  
  const me = new Person('Lee', 20);
    me.sayHi(); 

    const you = new Person('Kim', 30);
    you.sayHi(); 

    me.sayHi(); Hi Lee I am 30
    
  이는 Person.prototype.sayHi 메서드가 한 번 생성되는 클로저이기 때문이다.

  해당 메서드의 상위 스코프는 어떤 인스턴스로 호출하더라도 하나의 동일한 상위 스코프를 사용하게 된다.

  이러한 이유로 _age 변수의 상태가 유지되지 않는다.
  
  24.6 자주 발생하는 실수

 let 이나 const 키워드를 사용하는 반복문(for문, for …in 문, for …of 문, while 문 등)은 코드 블록을

  반복 실행할 때마다 새로운 렉시컬 환경을 생성하여 반복할 당시의 상태를 마치 스냅숏을 찍는 것처럼 저장한다.

  반복문의 코드 블록 내부에 함수 정의가 없는 반복문이 생성하는 새로운 렉시컬 환경은 반복 직후, 아무도 참조하지

  않기 때문에 가비지 컬렉션의 대상이 된다.

  또 다른 방법으로 함수형 프로그래밍 기법인 고차 함수를 사용하는 방법이 있다.

  이 방법은 변수와 반복문의 사용을 억제할 수 있기 때문에 오류를 줄이고 가독성을 좋게 만든다.
  
  //요소가 3개인 배열을 생성하고 배열의 인덱스를 반환하는 함수를 요소로 추가한다.
  // 배열의 요소로 추가된 함수들은 모두 클로저다.
  const funcs = Array.from(new Array(3), (_,i) => () => i ); //(3) [f, f, f]

  //배열의 요소로 추가된 함수들을 순차적으로 호출한다.
  funcs.forEach(f => console.log(f())); // 0 1 2
