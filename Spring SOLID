좋은 객체지향이란: 유연,변경이 용이하다 --> 다형성

역할과 구현을 분리한다.
클라이언트는 구현 대상의 내부구조를 몰라도, 내부구족 변경되어도, 대상 자체를 변경해도 영향을 받지 않는다.

다형성의 본질
1.인터페이스를 구현한 객체 인스턴스를 실행 시전에 유연하게 변경가능
2.다형성의 본질을 이해하려면 협력이라는 객체사이의 관계에서 시작
3. 클라이언트를 변경하지 않고, 서버의 구현 기능을 유연하게 변경할 수 있다.

인터페이스를 안정적으로 잘 설계하는 것이 중요!!

좋은 객체지향 5가지 원칙 SOLID
1.SRP - Single reeponsibility principle
한 클래스는 하나의 책임만 가져야한다.
단일책임 원칙

2.OCP - Open/Closed Principle 개방-폐쇄원칙
확장에는 열려있고, 변경에는 닫혀 있어야 한다. --> 다형성 활용
별도의 설정자 필요

3.LSP 리스코프 치환 원칙
프로그램 객체는 프로그램의 정확성을 깨뜨리지 않으면서 하우 타입의 인스턴슬 바꿀 수 있어야한다.
하위 클래스는 인터페이스 규약을 지켜야한다. ex) 엑셀은 앞으로 가라는 기능 --> 뒤로 가게 구현하면 위반

4.ISP 인터페이스 분리 원칙
자동차 인터페이스 --> 운전 인터페이스, 정비 인터페이스 분리

5.DIP 의존관계 역전 원칙
구현 클래스에 의존하지 말고 인터페이스에 의존해라

다형성만으로는 OCP, DIP 지킬 수 없다.
뭔가 더 필요 --> DI
