React가 Client-side Rendering을 최적화하는 원리

  브라우저에서 화면을 그리기 위해 일어나는 일련의 과정들은 변화 가 발생했을 때 일어납니다.
  이 변화라는 것이 곰곰 생각해보면 유저 차원에서는 풍부한 인터렉션 입니다. 
  이런 렌더링 작업이 일어나는 동안 자바스크립트가 브라우저의 메인 스레드를 먹어버리면 끊김 현상이 일어나게 됩니다.
  그래서 중요하게 생각되는 숫자가 바로 초당 60회의 새로 고침입니다(60fps, frame per second).
  window.requestAnimationFrame()을 사용하면 프레임 수를 보장하여 이러한 부드러운 렌더링을 제공할 수 있습니다.
  
  React는 변화가 있을 때마다 실제 DOM을 업데이트 하지 않고, 메모리에 올려둔 가상 DOM(Vitural DOM, 트리 형태의 자바스크립트 객체)을 업데이트 한다. 
  또한, 이러한 변화가 잦을 것을 대비하여 변화를 반영하는 타이밍을 스케줄러를 통해 관리한다. 변화는 스케줄러에 의해 배치(Batch)로 모아진 다음 
  적절한 타이밍에 비동기적(즉각적이지 않은 방식으로)으로 한꺼번에 처리된다.
  
  각각의 DOM을 조작하는데는 jQuery가 훨씬 쉽고 간단할 수 있지만, 
  대규모의 앱의 상태를 관리하고 퍼포먼스를 보장하기 위해서는 React를 사용하는 것이 효과적일 수 있는 이유입니다.

		
	두 가지 기준
		서로 다른 타입의 두 엘리먼트는 서로 다른 트리를 만들어낸다.

	  개발자가 key prop을 통해, 여러 렌더링 사이에서 어떤 자식 엘리먼트가 변경되지 않아야 할지 표시해 줄 수 있다.

	두 가지 기준을 가지고 적당히 비교해나가면서 만약 부모 트리에서 변화가 있었다면 그 부모와 자식요소들까지 전부 폐기하고 
	가상 DOM에 준비된 요소로 통째로 교체한다는 뜻입니다. 이건 리액트의 상태 변경이 불변성(immutability)을 전제하기 때문에 가능한 일입니다.
