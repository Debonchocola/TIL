1. && 연산자로 null & undefined

function 함수 (a : string | undefined) {
  if( a && typeof a === 'string' ) {
  
  }
}

a가 undefined면 if문 실행 x
a가 string 이면 if문 실행 o


&& 연산자의 다른 기능

  && 기호로 비교할 때 true와 false를 넣는게 아니라 자료형을 넣으면

  && 사이에서 처음 등장하는 falsy 값을 찾아주고 그게 아니면 마지막 값을 남겨줍니다.

  falsy 값은 false와 유사한 기능을 하는 null, undefined, NaN 이런 값들을 의미합니다.
  
  1 && null && 3   // null이 남음
  
  undefined && '안녕' && 100  // undefined 남음



typeof 연산자는 number string boolean object 이런식으로만 판정

2. in키워드로 object narrowing 가능

    type Fish = { swim: string };
    type Bird = { fly: string };
    function 함수(animal: Fish | Bird) {
      if ("swim" in animal) {
        return animal.swim
      }
      return animal.fly
    } 
    
3. instanceof 로 가능 (부모객체 확인)

  let 날짜 = new Date();
  if (날짜 instanceof Date){
    console.log('참이에요')
  }
  
비슷한 타입일때 어떻게 해야할까?

literal type 사용

    type Car = {
      wheel : '4개',
      color : string
    }
    type Bike = {
      wheel : '2개',
      color : string
    }

    function 함수(x : Car | Bike){
      if (x.wheel === '4개'){
        console.log('the car is ' + x.color)
      } else {
        console.log('the bike is ' + x.color)
      }
    }
