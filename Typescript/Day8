Generic
  function 함수<MyType>(x: MyType[]) :MyType {
    return x[0];
  }

  let a = 함수<number>([4,2])
  let b = 함수<string>(['kim', 'park'])
  
  My Type에 number, string이 들어간다. 필요한 타입이 들어간다.
  
타입제한 해주기 extends

  extends 문법을 쓰면 넣을 수 있는 타입을 제한할 수 있습니다.

  그래서 **MyType extends number** 라고 쓰면 타입 파라미터에 넣을 수 있는 타입을 제한가능합니다.

  interface 문법에 쓰는 extends와는 살짝 다른 느낌입니다.

  그 extends는 복사인데 이번 extends는 number와 비슷한 속성을 가지고 있는지 if 문으로 체크하는 문법이라고 보면 됩니다.
  
  function 함수<MyType extends number>(x: MyType) {
    return x - 1
  }

  let a = 함수<number>(100) //잘됩니다
  
  
문자를 집어넣으면 문자의 갯수, array를 집어넣으면 array안의 자료 갯수를 콘솔창에 출력해주는 함수

  function 함수<MyType extends string | string[]>(x: MyType)  { 
          console.log(x.length)   
    } 

    함수<string>('hello');
    함수<string[]>(['kim','park'])
    
    
    interface Animal {
      name : string;
      age : number 
    }

    let data = '{"name" : "dog", "age" : 1 }';


    function 함수<Type>(x :string) :Type {
      return JSON.parse(x);
    }
    let result = 함수<Animal>(data)
    console.log(result)
    
    as문법 사용하면 더 편하지만 확장성이 없다. 확장성을 위해서 GENERIC 쓰는 것이 좋다.
    
  class에 GENERIC 적용
  
    class Person <T> {
      name;
      constructor(a :T){
        this.name = a;
      }
    }
    let a = new Person<string>('어쩌구');
    a.name //string 타입이 되었넹
