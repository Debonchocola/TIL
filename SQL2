SELECT A.ANIMAL_ID, A.NAME
FROM ANIMAL_OUTS A LEFT JOIN ANIMAL_INS B ON A.ANIMAL_ID = B.ANIMAL_ID
WHERE B.ANIMAL_ID IS NULL
ORDER BY A.ANIMAL_ID;
join을 통해서 두 개의 데이터를 사용한다. 이경우 A의 정보는 있는데 B의 정보는 없는 경우의 데이터를 찾기 위한 방법이다.

SELECT SQL1.ANIMAL_ID, SQL1.NAME
FROM
(SELECT A.ANIMAL_ID, A.NAME, A.DATETIME AS TIMEA, B.DATETIME AS TIMEB
FROM ANIMAL_INS A,ANIMAL_OUTS B 
WHERE A.ANIMAL_ID = B.ANIMAL_ID) SQL1 
WHERE SQL1.TIMEA > SQL1.TIMEB
ORDER BY SQL1.TIMEA;
위의 방법은 SELECT문 안에 SELECT문을 하나 더 사용하여 기존에 없는 데이터를 하나 만들어서 사용하는 방법이다.

SELECT A.NAME, A.DATETIME 
FROM ANIMAL_INS A LEFT JOIN ANIMAL_OUTS B ON A.ANIMAL_ID = B.ANIMAL_ID
WHERE B.ANIMAL_ID IS NULL
ORDER BY A.DATETIME
LIMIT 3;
WHERE문의 경우가 NULL이라는 뜻은 입양을 보내지 않았다는 뜻이 되고
LIMIT의 경우 뽑아낼 데이터의 숫자를 제한할 수 있다.

SELECT B.ANIMAL_ID, B.ANIMAL_TYPE, B.NAME
FROM(
    SELECT *
    FROM ANIMAL_INS A 
    WHERE SEX_UPON_INTAKE LIKE "%Intact%"
    ) SQL1 ,ANIMAL_OUTS B 
    WHERE SQL1.ANIMAL_ID = B.ANIMAL_ID
    AND B.SEX_UPON_OUTCOME NOT LIKE "%Intact%";
    이 경우도 필요한 데이터를 만들기 위해 SELECT문 안에 SELECT문을 만들어서 필요한 데이터를 만들었다.
    LIKE는 해당 글자가 들어가 있는 데이터만 뽑아 올 수 있다.
    
    개인적으로 JOIN문 문제가 가장 어려웠던것 같다. 문법이 기억나지 않기도 했고 다른 문제들보다 구조자체가 복잡했던것 같다.
    어려울수록 문제를 푸는 재미가 있어서 재미있게 SQL을 복습할 수 있는 기회였다.
    일주일에 한번씩은 다시 풀어보며 기본은 까먹지 않도록 노력해야겠다.
    
