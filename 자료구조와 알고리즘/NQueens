const NQueens = () => {
    let count = 0;

    function solution(n) {
        const board = new Array(n).fill(0);
        locate(board, 0, n);
        return count;
     }

     function check () {
        
     }
  const nQueensPrac = (i, col) => {
      let n = col.length - 1;

      if (check(i, col)) {
          if (i === n) {

          } else {

              nQueensPrac()
          }
      }
  }
  const check = (i,col) => {
      let j = 1;
      check = true;
      while (j < i) {
          if (col[i] === col[j] || Math.abs(col[i] - col[j] === (i - j))) {
              check = false;
              j += 1;
          }
          return check;
      }

  }
//   const sol = (N) => {
//     const row = new Array(N).fill(0);
//     let cnt = 0;

//     function isPossible(L, X) {
//       // L행 X열에 퀸을 둘 수 있는지 판단하기 위해 0 ~ L-1행까지 상하좌우 + 대각선까지 조회.
//       for (let i = 0; i < L; i++) {
//         if (X === row[i]) return false;
//         if (Math.abs(X - row[i]) === L - i) return false;
//       }
//       return true;
//     }

//     function dfs(L) {
//       if (L === N) {
//         cnt++;
//         return;
//       }
//       for (let i = 0; i < N; i++) {
//         if (isPossible(L)) {
//           // L행 i열에 둘 수 있다면 실행.
//           row[L] = i;
//           dfs(L + 1);
//         }
//       }
//     }

//     dfs(0);
//     return cnt;
//   };
//   console.log(sol(4));
};

export default NQueens;


const NQueens = () => {
  const sol = (n) => {
    let results = [];

    const isValid = (colPlacement) => {
      let rows = colPlacement.length - 1;
      console.log(colPlacement);
      console.log(rows);
      for (let i = 0; i < rows; i++) {
        let diff = Math.abs(colPlacement[i] - colPlacement[rows]); // col difference
        // rows - i == row diff between current and previous
        // diagonal check is when the slope is same y1 - y2 === x1 - x2
        if (diff === 0 || diff === rows - i) {
          // its either on same column or on same diagonals
          return false;
        }
      }
      return true;
    };

    const solve = (n, row, colPlacement, results) => {
      if (row === n) {
        console.log(row);
        // last move to put on row === n is valid, we found valid moves
        // creating a shallow copy of colPlacement to add before pointer gets mutated as it goes back up the stack
        results.push([...colPlacement]);
      } else {
        for (let col = 0; col < n; col++) {
          console.log(colPlacement);
          colPlacement.push(col);

          if (isValid(colPlacement)) {
            solve(n, row + 1, colPlacement, results);
          }
          //   console.log(colPlacement);
          colPlacement.pop();
        }
      }
    };

    solve(n, 0, [], results);
    // console.log(results);
    results = results.map((result) => {
      return result.map((row, index) => {
        let newRow = "";
        for (let i = 0; i < n; i++) {
          if (i === row) {
            newRow += "Q";
          } else {
            newRow += ".";
          }
        }
        // console.log(newRow);
        return newRow;
      });
    });
    // console.log(results);
    return results;
  };
  sol(4);
};

export default NQueens;
