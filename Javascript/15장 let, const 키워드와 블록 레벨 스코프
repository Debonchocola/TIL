var의 문제점

15.1.1 변수 중복 선언 허용 - 의도치 않게 먼저 선언된 변수 값이 변경되는 부작용이 발생한다.

15.1.2 함수 레벨 스코프 - var로 선언된 변수는 코드 블록 내에 선언해도 전역 변수가 된다.

    ```jsx
    var x =1;
    if (true) {
      var x = 10;
    } 

    console.log(x); //10
    ```

    ```jsx
    var i = 10;
    for(var i =0; i < 5; i++) {
      console.log(i); //0 1 2 3 4
    }

    console.log(i); //5
    ```

  함수 레벨 스코프는 전역 변수를 남발할 가능성을 높이고 의도치 않게 전역 변수가 중복 선언되는 경우가 발생

15.1.3 변수 호이스팅 

  - 호이스팅은 에러를 발생시키진 않지만 코드의 가독성을 떨어뜨리고 오류를 발생시킬 여지를 남긴다.

### 15.2 let

15.2.1 변수 중복 선언 금지 - let의 경우 중복 선언시 에러가 발생

15.2.2 블록 레벨 스코프 

  var의 경우 함수의 코드 블록만을 지역 스코프로 인정하는 함수 레벨 스코프를 따른다.

  let의 경우 모든 코드 블록(함수, if문, for문, while문 등)을 지역 스코프로 인정하는 블록 레벨 스코프를 따른다.

    ```jsx
    let foo = 1;
    {
      let foo = 2;
      let bar = 1;
    }

    console.log(foo); //1
    console.log(bar); //ReferenceError: bar is not defined
    ```

15.2.3 변수 호이스팅

  let의 경우 선언 단계 → 초기화 단계 → 할당 단계를 거치는데 변수 선언문에서 초기화가 실행된다.

  var의 경우 선언 단계에 변수의 존재를 알리고 즉시 초기화 단계에서 undefined로 변수를 초기화한다. 따라서 선언문 이전에 변수에 접근해도 스코프에 변수가 존재하기 때문에 에러가 발생하지 않는다.

  그러나 let도 호이스팅이 안되는 것처럼 보일뿐 호이스팅 된다.

    ```jsx
    let foo =1;

    {
      console.log(foo);
      let foo = 2;
    }
    ```

15.2.4 전역 객체와 let

  var의 경우 전역 객체인 window의 프로퍼티이다. 그래서 [window.foo](http://window.foo) 이런식으로 접근 가능함

  let의 경우 전역 객체의 프로퍼티가 아니고 보이지 않는 개념적 블록내에 존재한다.

  그래서 [window.foo](http://window.foo) 이런식으로 접근이 불가능함.

### 15.3 const 키워드

**15.3.1 선언과 초기화**

  const 키워드로 선언한 변수는 반드시 선언과 동시에 초기화해야 한다.

    ```jsx
    const foo; // SyntaxError: Missing initializer in const declaration
    ```

  const 도 let과 마찬가지로 블록레벨 스코프를 가지며, 호이스팅이 발생하지 않는 것처럼 동작

    ```jsx
    {
      console.log(foo); //ReferenceError: Cannot access 'foo' before initialization
      const foo = 1;
      console.log(foo); //1	
    }

    console.log(foo); // ReferenceError: foo is not defined
    ```

**15.3.2 재할당 금지 - const는 재할당이 금지된다.**

**15.3.3 상수** 

  -원시값은 변경할 수 없는 값이고 const 키워드에 의해 재할당이 금지되므로 

    할당된 값을 변경할 방법이 없다.

  -상수의 이름은 대문자로 선언해 상수임을 명확히 나타내야 하고 스네이크 케이스로 표현한다.

    ```jsx
    const TAX_RATE = 0.1;

    let preTaxPrice = 100;

    let afterTaxPrice = preTaxPrice + (preTaxPrice * TAX_RATE);

    console.log(afterTaxPrice); //110
    ```

**15.3.4 const 키워드와 객체**

  const에 원시 값을 할당한 경우 값을 변경할 수 없지만 객체를 할당한 경우 값을 변경할 수 있다.

  const는 재할당을 금지할 뿐 ‘불변’을 의미하지 않는다.

  객체가 변경되더라도 변수에 할당된 참조 값은 변경되지 않는다.

### 15.4 var vs let vs const

  권장사항

  - ES6를 사용한다면 var키워드는 사용하지 않느다.

  -  재할당이 필요한 경우 let을 사용하고 변수의 스코프는 최대한 좁게 만든다.

  -  변경이 발생하지 않고 읽기 전용인 경우 const를 사용한다.(const는 재할당을 금지하므로 안전)
