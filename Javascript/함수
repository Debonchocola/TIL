 함수를 사용하는 이유

    - 코드의 재사용

    - 유지보수의 편의성

    - 코드의 신뢰성
    
  함수를 사용하지 않으면 중복해서 여러 번 작성하면서 코드 수정시 중복된 횟수만큼 코드를

  수정해야 하고, 그 과정에서 시간이 더 걸리고 실수할 가능성이 높아진다.

  적절한 함수명으로 코드의 가독성을 높일 수 있다.

  함수 리터럴 구성 요소

  함수이름

  - 식별자 네이밍 규칙 준수
  - 함수의 이름은 함수 몸체에서만 참조할 수 있는 식별자다.
  - 함수 이름은 생략할 수 있다.

  매개변수 목록

  - 함수 호출 시 지정한 인수가 순서대로 할당된다. 순서 지켜야 한다.
  - 매개변수는 함수 내에서 변수와 동일하게 취급되기 때문에 네이밍 규칙 지켜야 한다.

  함수는 객체이다. 일반 객체와 차이점은 함수는 호출 가능하다.
  함수 선언문

  ```jsx
  function add(x,y) {
    return x + y;
  } 
  ```

  함수 표현식

  ```jsx
  let add = function (x,y) {
    return x+ y;
  }
  ```

  Function 생성자 함수

  ```jsx
    let add = new Function('x','y','return x+ y');
  ```

  화살표 함수

  ```jsx
  let add = (x, y) => x + y;
  ```

  변수는 선언, 함수는 정의라고 표현한다.
  
  함수 선언문은 표현식이 아닌 문이기 때문에 함수 이름을 생략할 수 없다.

  표현식이 아닌 문은 변수에 할당할 수 없다.

  함수 선언문으로 정의된 함수와 리터럴 함수는 비슷해 보이지만

  호출을 할 수 있냐? 없냐?로 구분된다.

  함수 선언문으로 정의된 함수는 식별자로 호출할 수 있다. ( 암묵적으로 JS엔진에서 생성한다. )

  함수 이름으로 호출하는 것이 아닌 식별자로 호출한다. 다만 함수 이름과 변수 이름이 일치하므로

  함수 이름으로 호출되는 것 처럼 보일 뿐이다.

  ```jsx
  let add = function add (x,y) {
    return x + y;
  };

  console.log(add(2,5));

  첫번째,세번째 add는 식별자이다.
  ```

  함수 선언문: ‘표현식이 아닌 문’

  함수 표현식: ‘표현식인 문’
  
  console.log(add(2,5));  //7
  console.log(sub(2,5)); //TypeError: sub is not a function

  function add(x,y) {
    return x + y;
  }

  let sub = function (x, y) {
    return x - y;
  }
  이런 차이가 발생하는 이유는 함수 선언문 과 함수 표현식은 함수의 생성 시점이 다르기 때문이다.
  
  ### 호이스팅

  -함수의 선언문이 코드의 선두로 끌어 올려진 것처럼 동작하는 자바스크립트 특징

  함수 vs 변수 호이스팅

  변수는 undefined로 초기화 되고, 함수는 함수객체로 초기화된다.

  그래서 함수는 호출하면 함수 호이스팅에 의해 선언문 이전에도 호출이 가능하다.

  **함수표현식은 변수 처럼 동작하지만 변수 할당문의 값은 할당문이 실행되는 시점,**

  **런타임에 평가되므로 함수 리터럴도 실행되는 시점에 평가되어 함수 객체가 된다.**

  **함수표현식은 변수 호이스팅이 발생**

  함수 호이스팅은 함수를 호출하기 전에 반드시 함수를 선언해야 한다는 규칙을 무시한다.

  그래서 JSON의 창시자 더글라스 크락포드는 함수 선언문 대신 함수 표현식을 사용할 것을 권장한다.
  
  function add(x,y) {
    return x + y;
  }
  console.log(add(2)); //NaN (2+undefined)
  
  매개변수보다 인수가 많은 경우 초과된 인수는 무시된다.
  
  function add(x,y) {
    return x + y;
  }

  console.log(add(2, 5, 10)); //7 
  
  자바스크립트 특징

  1. 자바스크립트 함수는 매개변수와 인수의 개수가 일치하는지 확인하지 않는다.
  2. 자바스크립트는 동적 타입 언어다. 따라서 매개변수의 타입을 사전에 지정할 수 없다.
  
  function add(x,y) {
    if(typeof x !== 'number' || typeof y !== 'number') {
      throw new TypeError('인수는 모두 숫자 값이어야 합니다.');
      }
      return x + y;
    }

  console.log(add(2));//TypeError: 인수는 모두 숫자 값이어야 합니다.
  console.log(add('a','b')); //TypeError: 인수는 모두 숫자 값이어야 합니다.
  
  이러한 방법으로 자바스크립트 특징에서 오는 문제를 해결할 수 있다. 

  arguments 객체를 통해 인수 개수를 확인할 수도 있다.
  
  function add(a = 0, b = 0, c = 0) {
    return a + b + c;
  }

  console.log(add(1,2,3)); //6
  console.log(add(1,2)); //3
  
  매개변수에 최대 개수에 제한은 없다고 하지만 3개 이하로 권장한다.

  객체를 인수로 사용하면 매개변수 순서에 신경 쓰지 않아도 된다.

  단점) 부수효과로 원본 객체가 변경될 수 있다.
  
  $.ajax({
      method: 'POST',
      url: '/user',
      data:{id: 1, name: 'Lee'},
    })
    
    반환문 뒤는  실행되지 않는다.
    function multiply(x,y) {
      return x * y;
      console.log('실행 안돼');
    }
    
    함수형 프로그램밍으로 순수함수를 만들어서 부수효과를 최대한 억제하여 오류를 피해야 한다.
    
    재귀함수
    function factorial(n) {
      if(n <= 1) return 1;

      return n * factorial(n-1);
    }

    console.log(factorial(5)); // 5! = 5 * 4 * 3 * 2 * 1 = 120
    
      탈출조건을 반드시 만들어야 한다.

      재귀함수는 반복문을 사용하는 것보다 재귀함수를 사용하는 편이 더 직관적으로 이해하기 쉬울 때만

      한정적으로 사용하는것이 바람직하다.
    
    
    콜백함수
      -매개변수를 통해 다른 함수의 내부로 전달되는 함수

      -콜백함수를 전달받은 함수를 고차 함수라고 한다.
      
      function repeat(n,f) {
        for(let i = 0; i < n; i++) {
          f(i);
        }
      }

      let logAll = function (i) {
        console.log(i);
      };

      repeat(5, logAll); // 0 1 2 3 4

      let logOdds = function (i) {
        if (i % 2) console.log(i);
      };

      repeat(5, logOdds); // 1 3
      
      경우에 따라 변경되는 일을 함수 f로 추상화했고 이를 외부에서 전달받는다. 유연한 구조로 만들었다.
      
  **순수 함수와 비순수 함수**

    순수함수: 부수 효과 없는 함수, 동일한 인수 전달되면 **언제나 동일한 값**을 반환

    비순수함수: 부수효과 있는 함수

    현재시간은 외부 상태에 의존하지 않지만 내부 상태가 호출될 때마다 변화하기 때문에 순수함수 아니다.

    인자를 전달 받지 않는 순수함수는 상수와 마찬가지이기 때문에 의미가 없다.
    
    순수함수 
      let count = 0;

      function increase(n) {
        return ++n;
      }

      count = increase(count);
      console.log(count); //1

      count = increase(count);
      console.log(count); //2
      
    비순수함수
      let count = 0;

      function increase() {
        return ++count;
      }

      increase()
      console.log(count); //1

      increase()
      console.log(count); //2
